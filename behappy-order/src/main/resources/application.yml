spring:
  redis:
    redisson:
      config: |-
        # 例: 单节点设置
        singleServerConfig:
          # （节点地址）redis://-非ssl,rediss://-ssl
          address: redis://192.168.56.103:6379
          database: 0
          password: null
          # 如果当前连接池里的连接数量超过了`最小空闲连接数`，而同时有连接空闲时间超过了该数值，那么这些连接将会自动被关闭，并从连接池里去掉。时间单位是毫秒。
          idleConnectionTimeout: 10000
          # 同节点建立连接时的等待超时。时间单位是毫秒。
          connectTimeout: 10000
          # 等待节点回复命令的时间。该时间从命令发送成功时开始计时。
          timeout: 3000
          # 如果尝试达到 retryAttempts（命令失败重试次数） 仍然不能将命令发送至某个指定的节点时，将抛出错误。如果尝试在此限制之内发送成功，则开始启用 timeout（命令等待超时） 计时。
          retryAttempts: 3
          # 在某个节点执行相同或不同命令时，连续 失败 failedAttempts（执行失败最大次数） 时，该节点将被从可用节点列表里清除，直到 reconnectionTimeout（重新连接时间间隔） 超时以后再次尝试。
          retryInterval: 1500
          # 在Redis节点里显示的客户端名称。
          clientName: null
          # 发布和订阅连接的最小空闲连接数 默认1
          subscriptionConnectionMinimumIdleSize: 1
          # 发布和订阅连接池大小 默认50
          subscriptionConnectionPoolSize: 50
          # 单个连接最大订阅数量 默认5
          subscriptionsPerConnection: 5
          # 最小空闲连接数 默认32，现在暂时不需要那么多的线程
          connectionMinimumIdleSize: 4
          # 连接池大小,在启用该功能以后，Redisson将会监测DNS的变化情况。
          connectionPoolSize: 64
          # 监测DNS的变化情况的时间间隔。
          dnsMonitoringInterval: 5000
        # 这个线程池数量被所有RTopic对象监听器，RRemoteService调用者和RExecutorService任务共同共享。
        threads: 0
        # 这个线程池数量是在一个Redisson实例内，被其创建的所有分布式数据类型和服务，以及底层客户端所一同共享的线程池里保存的线程数量。
        nettyThreads: 0
        # 序列化方式, 内部提供了`ruedigermoeller`的fst方式,配置如下即可
        # (默认为jackson方式)如果想要适用jdk的编码方式,可以如下配置,jdk编码方式model必须实现序列化接口
        codec: !<org.xiaowu.behappy.redis.serializer.FstCodec> {}
        transportMode: NIO
  rabbitmq:
    host: 192.168.56.103
    port: 5672
    # 指定虚拟主机
    virtual-host: /
    username: root
    password: root
    # 开启发送端确认
    publisher-confirm-type: simple
    #　开启发送端消息抵达队列确认
    publisher-returns: true
    # 只要抵达队列，以异步优先回调我们这个 return/confirm
    template:
      mandatory: true
    # 手动ack消息 消息不容易丢失
    listener:
      simple:
        acknowledge-mode: manual
  mvc:
    pathmatch:
      matching-strategy: ANT_PATH_MATCHER
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    password: root
    username: root
    url: jdbc:mysql://192.168.56.103:3306/yygh_order?allowMultiQueries=true&useSSL=false&useUnicode=true&characterEncoding=UTF-8&autoReconnect=true&zeroDateTimeBehavior=convertToNull&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=GMT%2B8&nullCatalogMeansCurrent=true
  data:
    #uri: mongodb://用户名:密码@服务器IP:端口/数据库名
    # 上方为明确指定某个数据的用户进行连接
    # 也可以使用admin 数据库中的用户进行连接  统一到admin 数据库进行认证
    # admin 用户认证 url 写法： mongodb://账户:密码@ip:端口/数据库名?authSource=admin&authMechanism=SCRAM-SHA-1
    mongodb:
      uri: mongodb://root:root@192.168.56.103:27017/yygh_hosp?authSource=admin&authMechanism=SCRAM-SHA-1
# 数据源
# mybaits-plus配置
mybatis-plus:
  mapper-locations: classpath:/mapper/*.xml
  global-config:
    banner: false
    db-config:
      table-underline: true
      logic-delete-value: 1
      logic-not-delete-value: 0
  configuration:
    map-underscore-to-camel-case: true
    #开启sql日志
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
feign:
  sentinel:
    enabled: true
wx:
  pay:
    app-id: wx74862e0dfcf69954
    partner: 1558950191
    partner-key: T6m9iK73b0kn9g5v426MKfHQH7X8rKwb
    cert: classpath:s
